<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hazelcast imdg cp subsystem on Ensar Basri Kahveci</title>
    <link>https://basri.dev/tags/hazelcast-imdg-cp-subsystem/</link>
    <description>Recent content in hazelcast imdg cp subsystem on Ensar Basri Kahveci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>© 2020 Ensar Basri Kahveci. All rights reserved.</copyright>
    <lastBuildDate>Mon, 03 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://basri.dev/tags/hazelcast-imdg-cp-subsystem/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Testing the CP Subsystem with Jepsen</title>
      <link>https://basri.dev/posts/2019-06-03-testing-the-cp-subsystem-with-jepsen/</link>
      <pubDate>Mon, 03 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://basri.dev/posts/2019-06-03-testing-the-cp-subsystem-with-jepsen/</guid>
      <description>I published this post at Hazelcast blog and put a copy here.
At Hazelcast we take reliability very seriously. With the new CP Subsystem module, Hazelcast has become the first and only IMDG that offers a linearizable distributed implementation of the Java concurrency primitives backed by the Raft consensus algorithm. In addition to well-grounded designs and proven algorithms, reliability also requires a substantial amount of testing. We have been working hard to ensure the validity of our consistency claims.</description>
    </item>
    
    <item>
      <title>Distributed Locks are Dead; Long Live Distributed Locks!
</title>
      <link>https://basri.dev/posts/2019-04-02-distributed-locks-are-dead-long-live-distributed-locks/</link>
      <pubDate>Tue, 02 Apr 2019 00:00:00 +0000</pubDate>
      
      <guid>https://basri.dev/posts/2019-04-02-distributed-locks-are-dead-long-live-distributed-locks/</guid>
      <description>I published this post at Hazelcast blog and put a copy here.
“Distributed locks aren’t real”, some like to remind us. “Anyone who’s trying to sell you a distributed lock is selling you sawdust and lies.” This may sound rather bleak, but it doesn’t say that locking itself is impossible in a distributed system: it’s just that all of the system’s components must participate in the protocol. This blog post is the story of how we implemented a distributed locking protocol that gives your components a straightforward way of joining in.</description>
    </item>
    
    <item>
      <title>Riding the CP Subsystem</title>
      <link>https://basri.dev/posts/2019-03-18-riding-the-cp-subsystem/</link>
      <pubDate>Mon, 18 Mar 2019 00:00:00 +0000</pubDate>
      
      <guid>https://basri.dev/posts/2019-03-18-riding-the-cp-subsystem/</guid>
      <description>I published this post at Hazelcast blog and put a copy here.
The CP Subsystem of Hazelcast IDMG 3.12 offers a new linearizable implementation of Hazelcast’s concurrency APIs on top of the Raft consensus algorithm. These implementations live alongside AP data structures in the same Hazelcast IMDG cluster (new BFFs, yay!). You can store large data sets on hundreds of Hazelcast members and coordinate your operations using the new safe concurrency primitives that reside in the very same cluster.</description>
    </item>
    
    <item>
      <title>Hazelcast IMDG 3.12 Introduces CP Subsystem</title>
      <link>https://basri.dev/posts/2019-02-26-hazelcast-imdg-312-introduces-c-subsystem/</link>
      <pubDate>Tue, 26 Feb 2019 00:00:00 +0000</pubDate>
      
      <guid>https://basri.dev/posts/2019-02-26-hazelcast-imdg-312-introduces-c-subsystem/</guid>
      <description>I published this post at Hazelcast blog and put a copy here.
We put Java locks on steroids! Hazelcast is now the first and only In-Memory Data Grid (IMDG) to offer a linearizable and distributed implementation of the Java concurrency primitives backed by the Raft consensus algorithm. Sounds interesting? Just keep calm and carry on reading…
Hazelcast IMDG has been offering a set of concurrency APIs for a long time.</description>
    </item>
    
  </channel>
</rss>