<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>jsf-validator on Ensar Basri Kahveci</title>
    <link>https://basrikahveci.com/tags/jsf-validator/</link>
    <description>Recent content in jsf-validator on Ensar Basri Kahveci</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Fri, 11 Feb 2011 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://basrikahveci.com/tags/jsf-validator/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JSF Validator&#39;larında Dependency Injection (ayrıca Spring ile)</title>
      <link>https://basrikahveci.com/posts/2011-02-11-dependency-injection-in-custom-jsf-validators-alsowith-spring/</link>
      <pubDate>Fri, 11 Feb 2011 00:00:00 +0000</pubDate>
      
      <guid>https://basrikahveci.com/posts/2011-02-11-dependency-injection-in-custom-jsf-validators-alsowith-spring/</guid>
      <description>Acayip bir dil in, Türkçe yine out. Dependency Injection&#39;ı herkes kafasına göre Türkçeye çevirmiş ama bence en güzel ve geçerlisi şu abimin dediği&amp;ldquo;bağımlılık zerketme&amp;rdquo;.
Efenim JSF bize bean&amp;rsquo;lerimiz içerisinde validator metodlar tanımlama imkanı sunuyor olsa da, duruma özel validator&amp;rsquo;ları yeniden kullanılabilirlik açısından ayrı sınıflar halinde yazmak bence daha makul. Örneğin bir üye kayıt formunda kullanıcının girdiği eposta adresinin başka birisi tarafından kullanılıyor olup olmadığının kontrolünü formun arkasındaki bean üzerinden ya da ayrı bir (custom) validator üzerinden yapabiliriz.</description>
    </item>
    
  </channel>
</rss>